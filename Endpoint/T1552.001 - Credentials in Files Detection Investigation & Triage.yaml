playbook_name: "T1552.001 - Credentials in Files Detection: Investigation & Triage"
tactic: "Credential Access"
technique_id: "T1552.001"
technique_name: "Credentials in Files"
description: >
  Detects credentials stored insecurely in local files or scripts, which may be targeted by adversaries during credential access operations.

investigation_steps:
  - step_number: 1
    title: "Scan for Known Credential File Paths"
    description: >
      Identify access or modifications to files commonly used to store credentials (e.g., .aws/credentials, kubeconfig, ini/config files).
    checklist:
      - "Are there file access or modification events for credential locations?"
      - "Is there a correlation with suspicious processes?"
    data_sources:
      - "File system monitoring"
      - "Process creation logs"

  - step_number: 2
    title: "Detect Hardcoded Credentials in Scripts"
    description: >
      Monitor scripts for inclusion of hardcoded usernames, passwords, or tokens.
    checklist:
      - "Are there keywords like 'password', 'apikey', or 'token' in plaintext?"
      - "Do scripts have world-readable permissions?"
    data_sources:
      - "File content inspection"
      - "Script execution logs"

  - step_number: 3
    title: "Correlate File Access with Network Activity"
    description: >
      Observe if credentials accessed from files are used in outbound connections.
    checklist:
      - "Did network traffic follow access to credential files?"
      - "Is the traffic going to known C2 infrastructure or unknown destinations?"
    data_sources:
      - "Network logs"
      - "Firewall/DNS logs"

triage_labels:
  - severity_levels:
      - "Low: Credentials found in inactive or demo environments."
      - "Medium: Active credentials in non-production systems."
      - "High: Active production credentials in readable files."
  - confidence_levels:
      - "High: Verified plaintext credentials with active usage."
      - "Medium: File access combined with sensitive content match."
      - "Low: Credential file access by benign process."

ioc_types:
  - "Access to ~/.aws/credentials or kubeconfig"
  - "Hardcoded credentials in .py, .sh, or .ps1 scripts"
  - "Script access by unknown or suspicious user context"

queries/examples:
  - name: "Detect Hardcoded Credentials in Scripts"
    query: >
      file.path ENDSWITH (".sh", ".py", ".ps1") AND
      file.content MATCHES ("(?i)(password|apikey|token)=")

  - name: "Access to Known Credential Files"
    query: >
      file.path IN ("~/.aws/credentials", "/.kube/config", "/etc/openvpn/auth.txt")

automation_hooks:
  - "Flag files containing hardcoded secrets."
  - "Notify user or team upon detection."
  - "Quarantine scripts or rotate credentials as needed."

analyst_guidance:
  - "Determine if credentials are still valid."
  - "Audit file access history for potential abuse."
  - "Replace hardcoded secrets with environment variables or secret managers."

reference_links:
  - "https://attack.mitre.org/techniques/T1552/001/"
  - "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"

review_cycle: "Monthly or after credential file access detection"